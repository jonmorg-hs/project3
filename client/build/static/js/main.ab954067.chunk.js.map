{"version":3,"sources":["utils/mutations.js","utils/auth.js","components/SignupForm.js","components/LoginForm.js","utils/syncdata.js","utils/uploaddata.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","document","getElementById","className","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","addUser","error","data","useEffect","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","console","log","variables","Auth","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","syncData","alert","$","getJSON","geojson","req","store","db","transaction","objectStore","clear","add","e","onsuccess","evt","onerror","uploadData","AppNavbar","showModal","setShowModal","Navbar","expand","Container","fluid","Toggle","aria-controls","Collapse","id","Nav","loggedIn","Link","onClick","logout","Modal","size","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Title","Item","eventKey","Body","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","ReactDOM","render","StrictMode","navigator","serviceWorker","register","then"],"mappings":"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","file":"static/js/main.ab954067.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n      }\n    }\n  }\n`;\n","import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        document.getElementById(\"root\").className = \"splash\";\n        return true;\n      } else {\n        document.getElementById(\"root\").className = \"menu\";\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    document.getElementById(\"root\").className = \"menu\";\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    document.getElementById(\"root\").className = \"splash\";\n    localStorage.removeItem(\"id_token\");\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setUserFormData({\n      ...userFormData,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    console.log(userFormData);\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import $ from \"jquery\";\n\nconst syncData = () => {\n  alert(\"syncing data\");\n  $.getJSON(\n    \"https://www.haulsmart.com/apis/blastpolygons.php\",\n    function (geojson) {\n      var store = window.db\n        .transaction(\"polygons\", \"readwrite\")\n        .objectStore(\"polygons\");\n      var req;\n      req = store.clear();\n      try {\n        req = store.add(geojson);\n      } catch (e) {\n        throw e;\n      }\n      req.onsuccess = function (evt) {\n        alert(\"Insertion in DB successful\");\n      };\n      req.onerror = function () {\n        alert(\"Insertion in DB Failed \", this.error);\n      };\n    }\n  );\n};\n\nexport default syncData;\n","const uploadData = () => {\n  alert(\"uploading data\");\n};\n\nexport default uploadData;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab, Button } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\nimport LoginForm from \"./LoginForm\";\nimport syncData from \"../utils/syncdata\";\nimport uploadData from \"../utils/uploaddata\";\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar expand=\"lg\">\n        <Container fluid>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link onClick={() => syncData()}>\n                    Sync Data to HaulSmart Main\n                  </Nav.Link>\n                  <Nav.Link onClick={() => uploadData()}>\n                    Update Cloud Data\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link id=\"loginlink\" onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport Navbar from \"./components/Navbar\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n//serviceWorker.register();\n\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker\n    .register(\"./serviceWorker.js\")\n    .then((register) => console.log(register));\n}\n"],"sourceRoot":""}