{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBlasts.js","utils/queries.js","pages/SavedBlasts.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBlastId","blastId","savedBlastIds","JSON","parse","updatedSavedBlastIds","filter","savedBlastId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BLAST","REMOVE_BLAST","SearchBlasts","useState","searchedBlasts","setSavedBlastIds","useMutation","saveBlast","error","useEffect","blastIdArr","length","handleSaveBlast","a","blastToSave","find","blast","bookId","Auth","loggedIn","variables","newBlast","data","console","Jumbotron","fluid","className","Container","CardColumns","map","Card","key","border","image","Img","src","alt","title","variant","Body","Title","authors","Text","description","Button","disabled","some","onClick","GET_ME","SavedBlasts","useQuery","loading","removeBlast","userData","me","handleDeleteBlast","savedBlasts","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","id","Toggle","aria-controls","Collapse","Nav","Link","as","to","logout","Modal","size","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","register","then","log"],"mappings":"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","file":"static/js/main.ccb2c178.chunk.js","sourcesContent":["import decode from \"jwt-decode\";\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    return localStorage.getItem(\"id_token\");\n  }\n\n  login(idToken) {\n    localStorage.setItem(\"id_token\", idToken);\n    window.location.assign(\"/\");\n  }\n\n  logout() {\n    localStorage.removeItem(\"id_token\");\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBlastIds = () => {\n  const savedBlastIds = localStorage.getItem(\"saved_blasts\")\n    ? JSON.parse(localStorage.getItem(\"saved_blasts\"))\n    : [];\n\n  return savedBlastIds;\n};\n\nexport const saveBlastIds = (blastIdArr) => {\n  if (blastIdArr.length) {\n    localStorage.setItem(\"saved_blasts\", JSON.stringify(blastIdArr));\n  } else {\n    localStorage.removeItem(\"saved_blasts\");\n  }\n};\n\nexport const removeBlastId = (blastId) => {\n  const savedBlastIds = localStorage.getItem(\"saved_blasts\")\n    ? JSON.parse(localStorage.getItem(\"saved_blasts\"))\n    : null;\n\n  if (!savedBlastIds) {\n    return false;\n  }\n\n  const updatedSavedBlastIds = savedBlastIds?.filter(\n    (savedBlastId) => savedBlastId !== blastId\n  );\n  localStorage.setItem(\"saved_blasts\", JSON.stringify(updatedSavedBlastIds));\n\n  return true;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        blastCount\n        savedBlasts {\n          blastId\n          blastName\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_BLAST = gql`\n  mutation saveBlast($newBlast: InputBlast!) {\n    saveBlast(newBlast: $newBlast) {\n      _id\n      username\n      email\n      savedBlasts {\n        blastId\n        blastName\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BLAST = gql`\n  mutation removeBlast($blastId: ID!) {\n    removeBlast(blastId: $blastId) {\n      _id\n      username\n      email\n      savedBlasts {\n        blastId\n        blastName\n      }\n    }\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { saveBlastIds, getSavedBlastIds } from \"../utils/localStorage\";\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BLAST } from \"../utils/mutations\";\n\nconst SearchBlasts = () => {\n  const [searchedBlasts, setSearchedBlasts] = useState([]);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [savedBlastIds, setSavedBlastIds] = useState(getSavedBlastIds());\n\n  const [saveBlast, { error }] = useMutation(SAVE_BLAST);\n\n  useEffect(() => {\n    return () => saveBlastIds(savedBlastIds);\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.haulsmart.com/blastingdata.php?username=${searchInput}&password=`\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const blastData = items.map((blast) => ({\n        blastId: blast.id,\n        blastName: blast.volumeInfo.description,\n      }));\n\n      setSearchedBlasts(blastData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleSaveBlast = async (blastId) => {\n    const blastToSave = searchedBlasts.find(\n      (blast) => blast.bookId === blastId\n    );\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBlast({\n        variables: { newBlast: { ...blastToSave } },\n      });\n\n      setSavedBlastIds([...savedBlastIds, blastToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container></Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBlasts.length\n            ? `Viewing ${searchedBlasts.length} results:`\n            : \"\"}\n        </h2>\n        <CardColumns>\n          {searchedBlasts.map((blast) => {\n            return (\n              <Card key={blast.bookId} border=\"dark\">\n                {blast.image ? (\n                  <Card.Img\n                    src={blast.image}\n                    alt={`The cover for ${blast.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{blast.title}</Card.Title>\n                  <p className=\"small\">Authors: {blast.authors}</p>\n                  <Card.Text>{blast.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBlastIds?.some(\n                        (savedBlastId) => savedBlastId === blast.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBlast(blast.bookId)}\n                    >\n                      {savedBlastIds?.some(\n                        (savedBlastId) => savedBlastId === blast.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBlasts;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      blastCount\n      savedBlasts {\n        blastId\n        blastName\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { removeBlastId } from \"../utils/localStorage\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_BLAST } from \"../utils/mutations\";\n\nconst SavedBlasts = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [removeBlast, { error }] = useMutation(REMOVE_BLAST);\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBlast = async (blastId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBlast({\n        variables: { blastId },\n      });\n\n      removeBlastId(blastId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Active Blasts</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBlasts.length\n            ? `Viewing ${userData.savedBlasts.length} saved ${\n                userData.savedBlasts.length === 1 ? \"blast\" : \"blasts\"\n              }:`\n            : \"You have no saved blasts!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBlasts.map((blast) => {\n            return (\n              <Card key={blast.bookId} border=\"dark\">\n                {blast.image ? (\n                  <Card.Img\n                    src={blast.image}\n                    alt={`The cover for ${blast.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{blast.title}</Card.Title>\n                  <p className=\"small\">Authors: {blast.authors}</p>\n                  <Card.Text>{blast.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBlast(blast.bookId)}\n                  >\n                    Delete this Blast!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBlasts;\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error, data }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setUserFormData({\n      ...userFormData,\n      [name]: value,\n    });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab, Button } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\nimport LoginForm from \"./LoginForm\";\n\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <div>\n          <img id=\"headerimg\" src=\"logo192.png\" />\n          <label id=\"heading\">HAULSMART</label>\n        </div>\n        <Container fluid>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\"></Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your Blast Patterns\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport SearchBlasts from \"./pages/SearchBlasts\";\nimport SavedBlasts from \"./pages/SavedBlasts\";\nimport Navbar from \"./components/Navbar\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={SearchBlasts} />\n            <Route exact path=\"/saved\" component={SavedBlasts} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n//serviceWorker.register();\n\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker\n    .register(\"./serviceWorker.js\")\n    .then((register) => console.log(register));\n}\n"],"sourceRoot":""}